#!/usr/bin/env bash

VERSION="development"
URL="http://snapshot.tumbleweed.boombatower.com:13372"
URL_REPLACE="http://download.opensuse.org"
REPOS_DIR="/etc/zypp/repos.d"

tumbleweed_sudo()
{
  # Obtain sudo before issuing real commands to avoid half completion.
  if ! sudo cat /dev/null ; then
    echo "unable to obtain sudo"
    exit 1
  fi
}

tumbleweed_status()
{
  echo "latest   : $(tumbleweed_latest)"
  echo "installed: $(tumbleweed_version)"
}

tumbleweed_latest()
{
  curl --silent "$URL/latest"
}

tumbleweed_version()
{
  cat /etc/os-release | grep -oP "VERSION_ID=\"\K(\d+)"
}

tumbleweed_list()
{
  curl --silent "$URL/list"
}

tumbleweed_update()
{
  tumbleweed_switch
  install=1
}

tumbleweed_switch()
{
  if [ $# -eq 1 ] ; then
    local version="$1"
  else
    local version="$(tumbleweed_latest)"
    echo "choosing latest version"
  fi

  if [ "$version" == "$(tumbleweed_version)" ] && [ "$force" != "1" ] ; then
    echo "already on $version"
    exit
  fi

  echo "switching from $(tumbleweed_version) to $version"
  tumbleweed_list-repos "$version" > /dev/null
  if [ ${#repo_alias[@]} -eq 0 ] ; then
    echo "no snapshottable repos found"
    exit 1
  fi

  # Prompt for confirmation.
  echo -n "switch ${#repo_alias[@]} repos (${repo_alias[@]})? [y/n] (y): "
  read response
  if [ "$response" != "" ] && [ "$response" != "y" ] ; then
    echo "exiting"
    exit 1
  fi

  # Obtain sudo before issuing real commands to avoid half completion.
  if ! sudo cat /dev/null ; then
    echo "unable to obtain sudo"
    exit 1
  fi

  if [ ! -d "$REPOS_DIR/.previous" ] ; then
    sudo mkdir "$REPOS_DIR/.previous"
  fi

  local i=0
  while [ $i -lt ${#repo_alias[@]} ] ; do
    local files=($(grep -l "\[${repo_alias[$i]}\]" "$REPOS_DIR"/*))
    if [ ${#files[@]} -eq 1 ] ; then
      local file="${files[0]}"
      sudo cp "$file" "$REPOS_DIR/.previous/$(basename "$file")"
      sudo sed -i "s|baseurl=.*|baseurl=${repo_url[$i]}|" "$file"
      echo "switched ${repo_alias[$i]}"
    else
      echo "failed to switched ${repo_alias[$i]}"
    fi
    ((i++))
  done
}

tumbleweed_revert()
{
  if [ ! -d "$REPOS_DIR/.previous" ] ; then
    echo "nothing to revert"
    exit 1
  fi

  # Prompt for confirmation.
  local repos=($(ls "$REPOS_DIR/.previous"))
  echo -n "revert ${#repos[@]} repos? [y/n] (y): "
  read response
  if [ "$response" != "" ] && [ "$response" != "y" ] ; then
    echo "exiting"
    exit 1
  fi

  tumbleweed_sudo
  sudo mv "$REPOS_DIR/.previous"/* $REPOS_DIR/
  sudo rm -r "$REPOS_DIR/.previous"
}

tumbleweed_list-repos()
{
  local current="$(tumbleweed_version)"
  local replace="$1"
  local IFS=$'|\n'
  # Include disabled repos since they may be enabled outside of this tool.
  local parts=($(zypper lr -U | grep -P "(?:http://download.opensuse.org/(?:[^u][^/]+/)?tumbleweed|$URL)"))
  local i=0
  repo_alias=()
  repo_url=()
  while [ $i -lt ${#parts[@]} ] ; do
    local alias="${parts[$i+1]//[[:blank:]]/}"
    local url="${parts[$i+6]//[[:blank:]]/}"

    # Replace either current snapshot or non-snapshotted URL.
    url="${url/$current/$replace}"
    url="${url/$URL_REPLACE/$URL\/$replace}"

    repo_alias+=($alias)
    repo_url+=($url)

    echo "$url ($alias)"
    ((i+=7))
  done
}

tumbleweed_install()
{
  sudo zypper ref
  sudo zypper dup
}

tumbleweed_usage()
{
  cat <<_EOF_
Usage: $0 [options] command [arguments]

Options:
    --version         Print version string and exit
    --force           Force on operation to occur regardless of checks.
    --install         Initiate install after command.
-h, --help            Display this message and exit

Commands:
status                Show status information (latest and current snapshots).
latest                Show latest snapshot available.
version               Show current installed snapshot.
list                  List available snapshots.
update|upgrade        Switch to and install the latest available snapshot.
switch [version]      Switch to a new snapshot (none for latest).
revert                Revert to the previous snapshot or repo state.
list-repos            List snapshottable repo URLs for the current snapshot.
_EOF_
}

tumbleweed_handle()
{
  case "$1" in
    --version) echo "$VERSION" ; exit 0 ; ;;
    --force) force=1 ; ;;
    --install) install=1 ; ;;
    -h|--help) command="usage" ; ;;
    status|latest|version|list|revert)
      command="$1" ; ;;
    update|upgrade)
      command="update" ; ;;
    switch)
      command="$1" ; args_expected=1 ;
      ;;
    list-repos)
      command="$1"
      args=("$(tumbleweed_version)")
      ;;
    -*) echo "unknown option $1" ; exit 1 ; ;;
    *)
      if [ $args_expected -eq 0 ] ; then
        return 1
      fi
      args+=("$1")
      ((args_expected--))
      ;;
  esac
  return 0
}

command="usage"
args_expected=0
args=()
while tumbleweed_handle $1 ; do
  shift
done

tumbleweed_$command ${args[@]}

if [ "$install" == "1" ] ; then
  tumbleweed_install
fi
